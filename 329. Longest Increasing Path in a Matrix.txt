Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.







public class Solution {
    
     private Dictionary<Tuple<int,int>, int> positionAndLongestIncreasingCount = new Dictionary<Tuple<int,int>, int>();
    private Tuple<int,int>[] directions = new Tuple<int,int>[]{ Tuple.Create(0,1), Tuple.Create(0,-1), Tuple.Create(-1, 0), Tuple.Create(1,0)};
    public int LongestIncreasingPath(int[,] matrix) 
    {
        var row = matrix.GetLength(0);
        var col = matrix.GetLength(1);

        var global = 0;

        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                var local = DFS(matrix, i, j, long.MinValue);

                global = Math.Max(global, local);
            }
        }

        return global;
    }

    private int DFS(int[,] matrix, int x, int y, long preValue)
    {
        var row = matrix.GetLength(0);
        var col = matrix.GetLength(1);

        if (x < 0 || x >= row || y < 0 || y >= col) return 0;
        if (matrix[x, y] <= preValue) return 0;

        var curPosition = Tuple.Create(x, y);

        if (positionAndLongestIncreasingCount.ContainsKey(curPosition))
            return positionAndLongestIncreasingCount[curPosition];

        var global = 0;
        foreach(var direction in directions)
        {
            var nextX = x + direction.Item1;
            var nextY = y + direction.Item2;

            var local = DFS(matrix, nextX, nextY, matrix[x,y]);

            global = Math.Max(global, local);
        }

        global += 1;

        positionAndLongestIncreasingCount[curPosition] = global;
        
        return global;
    }
}

// I'd say try this
  public static int lip(int[,] matrix)
        {
            if (matrix == null) return max;
            int[,] dfsResults = new int[matrix.GetLength(0), matrix.GetLength(1)];

            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    if (dfsResults[i, j] == 0)
                        DFS(matrix, dfsResults, i, j);

                    max = Math.Max(max, dfsResults[i,j]);
                }
            }         
            
            return max;
        }

        public static int DFS(int[,] matrix, int[,] dfsResults, int row, int col)
        {
            //set default
            dfsResults[row, col] = 1;
            Test.PrintMatrix(dfsResults);

            for (int i = 0; i < directions.GetLength(0); i++)
            {
                int newRow = row + directions[i, 0];
                int newCol = col + directions[i, 1];

                //check for bounds row
                if (newRow < 0 || newRow > matrix.GetLength(0) - 1) continue;
                //check for bounds column
                if (newCol < 0 || newCol > matrix.GetLength(1) - 1) continue;

                if (matrix[row, col] >= matrix[newRow, newCol]) continue;

                if (dfsResults[newRow, newCol] != 0)
                {
                    dfsResults[row, col] = Math.Max(dfsResults[row, col], 1 + dfsResults[ newRow, newCol]);
                    Test.PrintMatrix(dfsResults);
                }
                else
                {
                    dfsResults[row, col] = Math.Max(dfsResults[row, col], 1 + DFS(matrix, dfsResults, newRow, newCol));
                    Test.PrintMatrix(dfsResults);
                }

                
            }

            return dfsResults[row, col];
        }
