Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:

Input: ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]] 
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2:

Input: ["bat","tab","cat"]
Output: [[0,1],[1,0]] 
Explanation: The palindromes are ["battab","tabbat"]


public class Solution {
    public IList<IList<int>> PalindromePairs(string[] words) 
    {
        IList<IList<int>> res = new List<IList<int>>();
        if (words == null || words.Length == 0)
        {
            return res;
        }

        //build the map save the key-val pairs: String - idx
        Dictionary<string, int> map = new Dictionary<string, int>();
        for (int i = 0; i < words.Length; i++)
        {
            map.Add(words[i], i);
        }

        //special cases: "" can be combine with any palindrome string
        if (map.ContainsKey(""))
        {
            int blankIdx = map[""];
            for (int i = 0; i < words.Length; i++)
            {
                if (isPalindrome(words[i]))
                {
                    if (i == blankIdx) continue;
                    res.Add(new List<int>() { blankIdx, i });
                    res.Add(new List<int>() { i, blankIdx });
                }
            }
        }

        //find all string and reverse string pairs
        for (int i = 0; i < words.Length; i++)
        {
            String cur_r = Reverse(words[i]);
            if (map.ContainsKey(cur_r))
            {
                int found = map[cur_r];
                if (found == i) continue;
                res.Add(new List<int>() { i, found });
            }
        }

        //find the pair s1, s2 that 
        //case1 : s1[0:cut] is palindrome and s1[cut+1:] = reverse(s2) => (s2, s1)
        //case2 : s1[cut+1:] is palindrome and s1[0:cut] = reverse(s2) => (s1, s2)
        for (int i = 0; i < words.Length; i++)
        {
            string cur = words[i];
            for (int cut = 1; cut < cur.Length; cut++)
            {
                if (isPalindrome(cur.Substring(0, cut)))
                {
                    string cut_r = Reverse(cur.Substring(cut));
                    if (map.ContainsKey(cut_r))
                    {
                        int found = map[cut_r];
                        if (found == i) continue;
                        res.Add(new List<int>() { found, i });
                    }
                }
                if (isPalindrome(cur.Substring(cut)))
                {
                    string cut_r = Reverse(cur.Substring(0, cut));
                    if (map.ContainsKey(cut_r))
                    {
                        int found = map[cut_r];
                        if (found == i) continue;
                        res.Add(new List<int>() { i, found });
                    }
                }
            }
        }

        return res;        
    }
    
    public string Reverse(string s)
    {
        char[] ch = s.ToCharArray();
        Array.Reverse(ch);
        return new string(ch);
    }

    public bool isPalindrome(string s)
    {
        int i = 0;
        int j = s.Length - 1;
        while (i <= j)
        {
            if (s[i] != s[j])
            {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }    
}
