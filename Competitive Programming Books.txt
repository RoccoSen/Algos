Try these books

1) Guide to Competitive Programming: Learning and Improving Algorithms Through Contests (Undergraduate Topics in Computer Science) 
2) Competitive Programming, 3rd Edition
3) Algorithmic Puzzles 1st Edition

Look into how this works
https://www.youtube.com/watch?v=sYlOjyPyX3g

Missed Questions: 
4[FB], 
29[FB], 
31[x], 
33 = I keep forgetting this Always remember to check left < mid or mid < right on the first if.
40[x], 
50 = Keep doing until I know it. Solution is super easy, 
53, 55, 56,
68 [FB]
,69, 71, 75, 81, 89, 96, 99
139 = Have to do a contains and sub strings,
153 [FB] good one i didnt get,
163, 189, 190, 198,
https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs
201 FB 
218 FB
224 FB
269 FB
280 FB
282 FB
287 FB
296 FB Got answer but code again
301 FB
303 FB
314 FB

336, 371, 394, 
402, 442, 489, 
560, 572, 
628, 647, 663, 680, 681
722, 750, 
862, 865, 
973, 988 (just because I didn't get the best solution)


Keep Coding: 
3,4,5, 10,23, 29, 30, 31, 32, 34 i don't understand why, 43 code one time, 44 dynamic, 47 one time, 48 for [][]
50, 68, 74, 76, 80, 81, 85 (stack with weird logic), 89, 94, 95, 96, 99
144


Recoded:
  2 -> Got done super fast
  4 ->
  3 -> Got it done. Messed up little on map[start]. Should have been map[s[start]]. S being the string.
  5 -> Coded without any issue
  8 -> Was pretty tired (no carbs) so made mistakes but the structure of algo was solid. Fixing the errors were easy.
 10 -> Made some erros with variables ect. This is due to not having intellisense ect. The logic of program was right.
 17 -> Easy Backtracking
 23 -> Again small bugs due to not having a compiler. Logic was solid. Got to pay more attention to detail and be perfect.
 29 -> [FAIL - do this without long]
 30 -> Had a hard time coding this. Also time limit as well. 
       I was coding aimlessly. Got to really think in these problems. 
       Hint: if at some point, we will have more words[] * words[0].Length than s.Length
 31 -> I had the algorithm wrongly memorized.
       It is finding where nums[i] < nums[i+]
       Then swapping with whatever is the least value in the array that is > nums[i].
       Easiest way to do this is to start from end of array and check one by one. If that number is > nums[i], swap, break;
       Then reverse anything that is i+1
 32 ->
 33 -> Easy to code after understanding problem.
 34 ->    
 41 ->
 42 -> Again small bugs, Like Math.Min instead of Math.Max. Solid logic. Ones idiotic bugs done, it was solid.
 43 -> Failry straight forward to code. Make sure to grab the right number from the already computed result.
 44 ->
 46 -> Did this line in 1 min
 47 -> Couldn't do it. Had to look up the solution.
       Example: [1,1,2]
       Trick is: if(i > 0 && nums[i] == nums[i - 1] && !used[i - 1])  continue; 
       If we have [T,F...... and we want to set the F to T, we good
       If we have  [F,F...... and we want to set the second F to T, no good. That permutation was already formed before.
 48 -> [X] Knew the solution for it but had a little difficulty in implementing it. Had the loop wrong, so had to do console.writeline
 49 -> Was super easy, got this done without any issue
 50 -> Found out how to do this. I say code again
 68
 73 ->
 74
 76 -> Tough to code but I got it. Had to understand the algo really well.
 78 -> Too easy
 79 -> Forgot to check for bounds. Also time limit exeeded because of the way I coded. When the solution is found, stop checking
 80
 81
 85 (stack with weird logic)
 89 
 89 ->
 94 Had a hard time but I'm super tired too.
 95
 96
 98 -> Easy, did this to boost my confidence after failure.
117 -> Super easy
124 -> Tiny mistake on my logic but otherwise easy to code
