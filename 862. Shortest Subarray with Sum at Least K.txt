Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.

If there is no non-empty subarray with sum at least K, return -1.

 

Example 1:

Input: A = [1], K = 1
Output: 1
Example 2:

Input: A = [1,2], K = 4
Output: -1
Example 3:

Input: A = [2,-1,2], K = 3
Output: 3
 

Note:

1 <= A.length <= 50000
-10 ^ 5 <= A[i] <= 10 ^ 5
1 <= K <= 10 ^ 9




public class Solution {
    public int ShortestSubarray(int[] A, int K) {
        int N = A.Length, res = N + 1;
        int[] B = new int[N + 1];
        for (int i = 0; i < N; i++)
            B[i + 1] = B[i] + A[i];
        LinkedList<int> d = new LinkedList<int>();
        for (int i = 0; i < N + 1; i++)
        {

            while (d.Count > 0 && B[i] - B[d.First.Value] >= K)
            {
                res = Math.Min(res, i - d.First.Value);
                d.RemoveFirst();
            }

            while (d.Count > 0 && B[i] <= B[d.Last.Value])
            {
                d.RemoveLast();
            }

            d.AddLast(i);
        }

        var returnMe = res <= N ? res : -1;
        return returnMe;    
    }
}
